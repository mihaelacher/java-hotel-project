package Panels;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;

import Core.DBConnection;
import Core.MyModel;
import Helpers.BuildRoomTypesHelper;

public class RoomsPanel extends JPanel{
	
	Connection conn=null;
	PreparedStatement state=null;
	ResultSet result;
	int id=-1;
	
	// Define buttons for visualization since the user should be able to
	// modify either room types or hotel rooms
	JPanel buttonsPanel = new JPanel();
	JButton showRoomTypePanelBt=new JButton("Добавяне на типове стаи");
	JButton showRoomsPanelBt=new JButton("Добавяне на стаи в хотела");
	
	// 	1. DEFINE ROOM TYPES OBJECTS 
	
	// Define room type panels
	JPanel roomTypesUpPanel = new JPanel();
	JPanel roomTypesMidPanel = new JPanel();
	JPanel roomTypesDownPanel = new JPanel();
	
	// Define room type labels
	JLabel nameLabel = new JLabel("Наименование");
	JLabel priceLabel = new JLabel("Цена за нощувка");
	
	// Define room type fields
	JTextField nameTF = new JTextField();
	JTextField priceTF = new JTextField();

	// Define room type buttons
	JButton roomTypesAddBt=new JButton("Добавяне");
	JButton roomTypesDeleteBt=new JButton("Изтриване");
	JButton roomTypesEditBt=new JButton("Промяна");
	JButton roomTypesSearchBt=new JButton("Търсене по име");
	JButton roomTypesRefreshBt=new JButton("Обнови");
	
	// Define room types table
	JTable table = new JTable();
	JScrollPane myScroll = new JScrollPane(table);
	
	// 2. DEFINE ROOM OBJECTS
	
	// Define room panels
	JPanel roomsUpPanel = new JPanel();
	JPanel roomsMidPanel = new JPanel();
	JPanel roomsDownPanel = new JPanel();
	
	// Define room type labels
	JLabel roomNubmerLabel = new JLabel("Номер на стаята");
	JLabel roomTypeLabel = new JLabel("Тип на стаята");
	JLabel roomStatusLabel = new JLabel("Статус на стаята");
	
	// Define room fields
	JTextField roomNubmerTF = new JTextField();
	JComboBox<String> roomStatusCombo=new JComboBox<String>();
	JComboBox<String> roomTypeCombo=new JComboBox<String>();
	
	// Define room type buttons
	JButton roomsAddBt=new JButton("Добавяне");
	JButton roomsDeleteBt=new JButton("Изтриване");
	JButton roomsEditBt=new JButton("Промяна");
	JButton roomsSearchBt=new JButton("Търсене по име");
	JButton roomsRefreshBt=new JButton("Обнови");
	
	public RoomsPanel()
	{	
		this.setLayout(new GridLayout(4,1));
		// First add upper panel with two buttons for both options
		buttonsPanel.setLayout(new FlowLayout());
		buttonsPanel.add(showRoomTypePanelBt);
		buttonsPanel.add(showRoomsPanelBt);
		this.add(buttonsPanel);
		
		// Set selected layout to visible
		roomTypesUpPanel.setVisible(false);
		roomTypesUpPanel.setLayout(new GridLayout(4,2));
		roomTypesUpPanel.add(nameLabel);
		roomTypesUpPanel.add(nameTF);
		roomTypesUpPanel.add(priceLabel);
		roomTypesUpPanel.add(priceTF);
		this.add(roomTypesUpPanel);
		
		roomTypesMidPanel.setVisible(false);
		roomTypesMidPanel.setLayout(new FlowLayout());
		roomTypesMidPanel.add(roomTypesAddBt);
		roomTypesMidPanel.add(roomTypesDeleteBt);
		roomTypesMidPanel.add(roomTypesEditBt);
		roomTypesMidPanel.add(roomTypesSearchBt);
		roomTypesMidPanel.add(roomTypesRefreshBt);
		this.add(roomTypesMidPanel);
		
		roomTypesDownPanel.setVisible(false);
		myScroll.setPreferredSize(new Dimension(350, 100));
		roomTypesDownPanel.add(myScroll);
		this.add(roomTypesDownPanel);
		
		roomTypesAddBt.addActionListener(new AddRoomTypeAction());
		roomTypesDeleteBt.addActionListener(new DeleteRoomTypeAction());
		roomTypesSearchBt.addActionListener(new SearchRoomTypeAction());
		roomTypesRefreshBt.addActionListener(new RefreshRoomTypeAction());
		
		table.addMouseListener(new MouseAction());
		
		this.defineRoomsLayout();
		
		// Then attach event listener to add dynamically both forms 
		showRoomTypePanelBt.addActionListener(new ShowRoomTypesAction());
		showRoomsPanelBt.addActionListener(new ShowRoomsAction());
	}
	
	class ShowRoomsAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			roomTypesUpPanel.setVisible(false);
			roomTypesMidPanel.setVisible(false);
			roomTypesDownPanel.setVisible(false);
			roomsUpPanel.setVisible(true);
			roomsMidPanel.setVisible(true);
			roomsDownPanel.setVisible(true);
			refreshTable(table,"rooms");
		}
		
	}
	
	class ShowRoomTypesAction implements ActionListener{
		
		@Override
		public void actionPerformed(ActionEvent e) {
			roomsUpPanel.setVisible(false);
			roomsMidPanel.setVisible(false);
			roomsDownPanel.setVisible(false);
			roomTypesUpPanel.setVisible(true);
			roomTypesMidPanel.setVisible(true);
			roomTypesDownPanel.setVisible(true);
			refreshTable(table,"room_type");
		}
		
	}
	
	public void defineRoomsLayout()
	{
		roomsUpPanel.setVisible(false);
		roomsUpPanel.setLayout(new GridLayout(6,1));
		roomsUpPanel.add(roomNubmerLabel);
		roomsUpPanel.add(roomNubmerTF);
		roomsUpPanel.add(roomTypeLabel);
		roomsUpPanel.add(roomTypeCombo);
		roomsUpPanel.add(roomStatusLabel);
		roomsUpPanel.add(roomStatusCombo);
		this.add(roomsUpPanel);
		
		roomsMidPanel.setVisible(false);
		roomsMidPanel.setLayout(new FlowLayout());
		roomsMidPanel.add(roomsAddBt);
		roomsMidPanel.add(roomsDeleteBt);
		roomsMidPanel.add(roomsEditBt);
		roomsMidPanel.add(roomsSearchBt);
		roomsMidPanel.add(roomsRefreshBt);
		this.add(roomsMidPanel);
		
		roomTypesDownPanel.setVisible(false);
		myScroll.setPreferredSize(new Dimension(350, 100));
		roomTypesDownPanel.add(myScroll);
		this.add(roomTypesDownPanel);
	}
	
	public void defineRoomTypesLayout()
	{
		
	}
	
	public void refreshTable(JTable table, String tabDB) {
		conn = DBConnection.getConnection();
		
		try {
			state=conn.prepareStatement("select * from " + tabDB);
			result=state.executeQuery();
			table.setModel(new MyModel(result));
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	class AddRoomAction implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
		}
		
	}
	
	class AddRoomTypeAction implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			BuildRoomTypesHelper.addRoomType(nameTF, priceTF);
			refreshTable(table,"room_type");
		}
		
	}
	
	class DeleteRoomTypeAction implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			BuildRoomTypesHelper.deleteRoomType(nameTF, priceTF, id);
			refreshTable(table, "room_type");
		}	
	}
	
	class SearchRoomTypeAction implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			result = BuildRoomTypesHelper.searchRoomType(nameTF, priceTF);
			try {
				table.setModel(new MyModel(result));
			} catch (Exception e) {
					// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	class RefreshRoomTypeAction implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent arg0) {
			refreshTable(table, "room_type");
		}
		
	}
	
	class MouseAction implements MouseListener{

		@Override
		public void mouseClicked(MouseEvent e) {
			int row=table.getSelectedRow();
			id=Integer.parseInt(table.getValueAt(row, 0).toString());
			if(e.getClickCount()>1) {
				nameTF.setText(table.getValueAt(row, 1).toString());
				priceTF.setText(table.getValueAt(row, 2).toString());
			}
		}

		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
	}
	
}

